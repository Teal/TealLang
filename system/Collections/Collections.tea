
// 表示一个区域。
struct Range<T> : IIterable<T> {
	T start = @start;
	T end = @end;
	
	/// 获取一个用于遍历集合的迭代器。
	partial IIterator<T> getIterator(){
		for(T current = start to end){
			yield current;
		}
	}
	
}

/// 表示一个区间。
struct Interval: IIterable<int> {

	/// 获取当前区间的起始值。
	int start = @start;
	
	/// 获取当前区间的终止值。
	int end = @end;
	
	/// 获取当前区间的长度。
	int length get {
		return end - start;
	}
	
	IIterator<int> getIterator(){
		for(int current = start to end){
			yield current;
		}
	}
	
	/// 统计当前集合中元素的个数。
	int count() {
		return length;
	}
	
	[implicit]
	as Range<int> {
		return Native.staticCast<Range<int>>(this);
	}
	
	[implicit]
	as Interval(Range<int> value) {
		return Native.staticCast<Interval>(value);
	}
	
}

// template Tuple(params Type[] types) {
	// var ret = 'class Tuple {';
	// var i = 0;
	// for(var type in types){
		// ret += `${type.fullName} item${i++};`;
	// }
	// ret += '}';
	// return ret;
// }
