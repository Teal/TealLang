




Program :
	StatementList
	
StatementList :
	Statement
	StatementList Statement
  
Statement :
	EmptyStatement
	Block
	LabeledStatement
	SelectionStatement
	IterationStatement
	JumpStatement
	TryStatement
	LetStatement
	LockStatement
	ExpressionStatement
	ImportStatement
	TypeDeclaration

EmptyStatement :
	;
	
Block :
	{ StatementList? }

LabeledStatement :
	Identifier : Statement

SelectionStatement :
	IfStatement
	SwitchStatement

IterationStatement :
	ForStatement
	ForInStatemeent

JumpStatement :
	ContinueStatement
	BreakStatement
	ReturnStatement
	YieldStatement
	GotoStatement
	ThrowStatement
	AssertStatement
	
ContinueStatement :
	continue ;
	
BreakStatement :
	break ;
	
ReturnStatement :
	return Expression? ;
	
YieldStatement :
	yield Expression ;
	
GotoStatement :
	goto Identifier ;
	goto case Expression ;
	
ThrowStatement :
	throw Expression ;
	
AssertStatement :
	assert Expression ;
	assert Expression throw Expression;

ExpressionStatement:
	Expression ;

TypeDeclaration :
	ClassDeclaration
	StructDeclaration
	EnumDeclaration
	InterfaceDeclaration
	NamespaceDeclaration
	ExtendDeclaration
	
IfStatement :
	if Condition Statement
    if Condition Statement else Statement
	
SwitchStatement :
	switch Condition? { CaseClauseList? }
	
CaseClauseList :
	CaseClause
	CaseClauseList CaseClause
	
CaseClause :
	case Expression : StatementList?
    case else : StatementList?

ForStatement :
	for Condition? Statement
	for Expression ; Expression ; Expression { Statement }
	for ( Expression ; Expression ; Expression ) Statement

ForInStatemeent :
	for Identifier in Expression { Statement }
	for (Identifier in Expression) Statement
		
Condition :
	Expression
	( Expression )

TryStatement :
	try Statement
	try Statement catch Statement
	try Statement finally Statement
	try Statement catch Statement finally Statement

LetStatement :
	let Condition Statement
	
LockStatement :
	lock Condition Statement
	
ImportStatement :
	import StringLiteral ;
	import StringLiteral => ModuleName ;
	
ClassDeclaration :
	class DeclarationBody

StructDeclaration :
	class DeclarationBody

EnumDeclaration :
	enum DeclarationBody

InterfaceDeclaration :
	interface DeclarationBody

NamespaceDeclaration :
	namespace DeclarationBody

ExtendDeclaration :
	extend DeclarationBody

DeclarationBody :
	Identifier TypeBase? { TypeBody? }
	
TypeBase :
	: TypeList
	
TypeList :
	Type
	TypeList , Type
	
TypeBody :
	MemberDeclaration
	TypeBody MemberDeclaration

MemberDeclaration :
	FieldDeclaration
	MethodDeclaration
	PropertyDeclaration
	DeclarationStatement
	OperatorDeclaration
	AbstractMethodDeclaration
	AbstractPropertyDeclaration
	AbstractOperatorDeclaration
	
FieldDeclaration :
	Identifier ;
	Identifier = Expression;
	
MethodDeclaration :
	Identifier { StatementList? }
	Identifier ( ParameterList? ) { StatementList? }
	
ParameterList :
	Parameter
	ParameterList , Parameter
	
Parameter :
	Identifier
	Parameter ?
	Parameter : Type
	Parameter = Expression
	Parameter [ ]
	
PropertyDeclaration :
	get MethodDeclaration
	set MethodDeclaration
	add MethodDeclaration
	remove MethodDeclaration
	
OperatorDeclaration :
	Operator ParameterList? { StatementList? }
	
AbstractMethodDeclaration :
	Identifier ? ;
	Identifier ( ParameterList? ) ? ;
		
AbstractPropertyDeclaration :
	get AbstractMethodDeclaration
	set AbstractMethodDeclaration
	add AbstractMethodDeclaration
	remove AbstractMethodDeclaration

AbstractOperatorDeclaration :
	Operator ParameterList? ? ;
	
三、表达式

Expression :
	ToExpression
	Expression , ToExpression
	
ToExpression :
	PeriodChainExpression
	ToExpression ~ PeriodChainExpression
	
PeriodChainExpression :
	AssignmentExpression
	PeriodChainExpression .. AssignmentExpression
	
AssignmentExpression :
	ConditionalExpression
	AssignmentExpression = ConditionalExpression
	AssignmentExpression => ConditionalExpression
	AssignmentExpression *= ConditionalExpression
	AssignmentExpression /= ConditionalExpression
	AssignmentExpression %= ConditionalExpression
	AssignmentExpression += ConditionalExpression
	AssignmentExpression -= ConditionalExpression
	AssignmentExpression := ConditionalExpression
	
ConditionalExpression :
	OrReturnExpression
	ConditionalExpression ? OrReturnExpression : OrReturnExpression
	
OrReturnExpression :
	LogicalOrExpression
	OrReturnExpression or LogicalOrExpression
	
LogicalOrExpression :
	LogicalAndExpression
	LogicalOrExpression || LogicalAndExpression
	
LogicalAndExpression : 
	VarOrExpression
	LogicalOrExpression && VarOrExpression
	
VarOrExpression : 
	VarAndExpression
	LogicalOrExpression | VarAndExpression
	
VarAndExpression : 
	EqualityExpression
	LogicalOrExpression & EqualityExpression
	
EqualityExpression :
	RelationalExpression
	EqualityExpression == RelationalExpression
	EqualityExpression != RelationalExpression
	
RelationalExpression :
	AdditiveExpression
	RelationalExpression > AdditiveExpression
	RelationalExpression < AdditiveExpression
	RelationalExpression >= AdditiveExpression
	RelationalExpression <= AdditiveExpression
	RelationalExpression as AdditiveExpression
	RelationalExpression is AdditiveExpression
	
AdditiveExpression :
	MultiplicativeExpression
	AdditiveExpression + MultiplicativeExpression
	AdditiveExpression - MultiplicativeExpression
	
MultiplicativeExpression :
	TypeOperatorExpression
	MultiplicativeExpression * UnaryExpression
	MultiplicativeExpression / UnaryExpression
	MultiplicativeExpression % UnaryExpression
	
UnaryExpression :
	PrimaryExpression
	+ UnaryExpression
	- UnaryExpression
	! UnaryExpression
	++ UnaryExpression
	-- UnaryExpression
	await UnaryExpression
	? UnaryExpression
	
PrimaryExpression :
	PrimaryExpression [No LineTerminator] ++
	PrimaryExpression [No LineTerminator] --
	ParenthesizedExpression
	Literal
	CallExpression
	
ParenthesizedExpression :
	( Expression )
	
CallExpression :
	FunctionCallExpression
	PropertyCallExpression
	IndexCallExpression
	
FunctionCallExpression :
	PrimaryExpression ( CallParameterList )
	
CallParameterList :
	CallParameter
	CallParameterList, CallParameter
	
CallParameter :
	Expression
	Key : Expression
	Key => Expression
	
PropertyCallExpression
	PrimaryExpression . Identifier
	PrimaryExpression . Literal
	PrimaryExpression . ParenthesizedExpression
	
IndexCallExpression
	PrimaryExpression [ Expression ]
	
Literal :
	Identifier
	StringLiteral
	IntLiteral
	ConstantLiteral
	ListLiteral
	DictLiteral

ListLiteral :
	[ Elision? ElementList? Elision? ]

ElementList :
	AssignmentExpression
	ElementList Elision AssignmentExpression

DictLiteral :
	[ ]
	[ Elision? PropertyNameAndValueList Elision? ]

PropertyNameAndValueList :
	PropertyName : AssignmentExpression
	PropertyNameAndValueList Elision PropertyName : AssignmentExpression

Elision :
	,
	Elision , 
	
ConstantLiteral :
	null
	undefined
	this
	base
	arguments
	true
	false
	